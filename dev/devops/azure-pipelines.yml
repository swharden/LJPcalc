trigger:
  - master

strategy:
  matrix:
    MacOS:
      imageName: "macOS-latest"
    Linux:
      imageName: "ubuntu-latest"
    Windows:
      imageName: "windows-latest"

pool:
  vmImage: $(imageName)

variables:
  buildConfiguration: "Release"

steps:
  # INSTALL NUGET
  - task: NuGetToolInstaller@1
    displayName: "Install NuGet"

  # BUILD LJPmath
  - task: DotNetCoreCLI@2
    displayName: "Build LJPmath"
    inputs:
      command: "build"
      projects: "src/LJPmath/*.csproj"

  # BUILD LJPtest
  - task: DotNetCoreCLI@2
    displayName: "Build LJPtest"
    inputs:
      command: "build"
      projects: "src/LJPtest/*.csproj"

  # RUN LJPtest TESTS
  - task: DotNetCoreCLI@2
    displayName: "Run Tests"
    inputs:
      command: test
      projects: "src/LJPtest/*.csproj"

  # RESTORE LJPconsole PACKAGES
  - task: NuGetCommand@2
    displayName: "Restore LJPconsole Packages"
    inputs:
      restoreSolution: "src/LJPconsole/*.csproj"

  # BUILD LJPconsole
  - task: DotNetCoreCLI@2
    displayName: "Build LJPconsole"
    inputs:
      command: "build"
      projects: "src/LJPconsole/*.csproj"

  ### WINDOWS ONLY ############################################################

  # RESTORE LJPcalc PACKAGES
  - task: NuGetCommand@2
    displayName: "Restore LJPcalc Packages"
    condition: contains(variables['agent.os'], 'Windows')
    inputs:
      restoreSolution: "src/LJPcalc/*.csproj"

  # BUILD LJPcalc
  - task: DotNetCoreCLI@2
    displayName: "Build LJPcalc (Windows)"
    condition: contains(variables['agent.os'], 'Windows')
    inputs:
      command: "build"
      projects: "src/LJPcalc/*.csproj"

  # BUILD LJPresearch
  - task: DotNetCoreCLI@2
    displayName: "Build LJPresearch (Windows)"
    condition: contains(variables['agent.os'], 'Windows')
    inputs:
      command: "build"
      projects: "src/LJPresearch/*.csproj"
