@using LJPcalc.Core;

<div class="modal fade" data-bs-backdrop="static" id="editIonModal" tabindex="-1">
    <div class="modal-dialog">
        <div class="modal-content">
            <div class="modal-header">
                <h5 class="modal-title" id="exampleModalLabel">
                    @if (IsNewIon)
                    {
                        <span>Add New Ion</span>
                    }
                    else
                    {
                        <span>Edit Ion</span>
                    }
                </h5>
                <button type="button" class="btn-close" data-bs-dismiss="modal" aria-label="Close"></button>
            </div>
            <div class="modal-body">

                <label class="form-label">Load properties of known ions</label>
                <div class="input-group mb-3">
                    <label class="input-group-text" for="inputGroupSelect01">Preset</label>
                    <select class="form-select" id="inputGroupSelect01" value="@IonSelectValue" @onchange=PresetSelected>
                        @foreach (Ion ion in IonLibrary.KnownIons)
                        {
                            <option value="@ion.NameWithCharge">@ion.NameWithCharge</option>
                        }
                    </select>
                </div>

                <label class="form-label mt-3">Edit ion properties</label>

                <div class="input-group mb-3">
                    <span class="input-group-text">Name</span>
                    <input type="text" class="form-control" @bind=Name @onfocusout=Validate>
                </div>

                <div class="input-group mb-3">
                    <span class="input-group-text">Charge</span>
                    <input type="text" class="form-control" @bind=Charge @onfocusout=Validate>
                </div>

                <div class="input-group mb-3">
                    <span class="input-group-text">Conductivity (S·cm<sup>2</sup>/mol)</span>
                    <input type="text" class="form-control" @bind=Conductivity @onfocusout=Validate>
                </div>

                <div class="input-group mb-3">
                    <span class="input-group-text">Mobility (m/s/N)</span>
                    <input type="text" class="form-control" @bind=Mobility readonly>
                </div>

                <label class="form-label mt-3">Ion concentration on each side of the junction</label>

                <div class="input-group  mb-3">
                    <span class="input-group-text">Concentration A (mM)</span>
                    <input type="text" class="form-control" @bind=ConcentrationA @onfocusout=Validate>
                </div>

                <div class="input-group mb-3">
                    <span class="input-group-text">Concentration B (mM)</span>
                    <input type="text" class="form-control" @bind=ConcentrationB @onfocusout=Validate>
                </div>
            </div>
            <div class="modal-footer">
                @if (IsNewIon)
                {
                    <button type="button" class="btn btn-secondary" data-bs-dismiss="modal">Cancel</button>
                    <button type="button" class="btn btn-primary" data-bs-dismiss="modal" disabled=@IsValidationError @onclick=SaveClicked>Add Ion</button>
                }
                else
                {
                    <button type="button" class="btn btn-secondary" data-bs-dismiss="modal">Cancel</button>
                    <button type="button" class="btn btn-danger" data-bs-dismiss="modal" @onclick=DeleteIon>Delete Ion</button>
                    <button type="button" class="btn btn-primary" data-bs-dismiss="modal" disabled=@IsValidationError @onclick=SaveClicked>Save Changes</button>
                }
            </div>
            @if (IsValidationError)
            {
                <ErrorAlert Title=@ValidationError Message=@ValidationErrorDetails />
            }
        </div>
    </div>
</div>

@code {
    [Parameter]
    [EditorRequired]
    public EventCallback<string> OnSaveIon { get; set; }

    private string IonSelectValue { get; set; } = string.Empty;

    public int IndexOfIonBeingEdited { get; set; } = -1;

    public string Name { get; set; } = string.Empty;

    public int Charge { get; set; }

    public double Conductivity { get; set; }

    public string Mobility { get => $"{Constants.Mobility(Conductivity, Charge):0.000E+0}"; set { return; } }

    public double ConcentrationA { get; set; }

    public double ConcentrationB { get; set; }

    public bool IsNewIon { get; set; }

    public bool IsToBeDeleted { get; set; }


    private bool IsValidationError => !string.IsNullOrEmpty(ValidationError);

    private string ValidationError { get; set; } = string.Empty;

    private string ValidationErrorDetails { get; set; } = string.Empty;

    public void Reset()
    {
        StateHasChanged();
    }

    public Ion ToIon()
    {
        return new Ion(Name, Charge, Conductivity, ConcentrationA, ConcentrationB);
    }

    public async Task SaveClicked()
    {
        await OnSaveIon.InvokeAsync();
    }

    public async Task DeleteIon()
    {
        IsToBeDeleted = true;
        await OnSaveIon.InvokeAsync();
    }

    public void PresetSelected(ChangeEventArgs e)
    {
        Console.WriteLine("Preset selected");
        string ionNameWithCharge = e?.Value?.ToString() ?? string.Empty;
        Ion[] matchingIons = IonLibrary.KnownIons.Where(x => x.NameWithCharge == ionNameWithCharge).ToArray();
        if (matchingIons.Any())
        {
            Ion matchingIon = matchingIons.First();
            Name = matchingIon.Name;
            Charge = matchingIon.Charge;
            Conductivity = matchingIon.Conductivity;
            ConcentrationA = 0;
            ConcentrationB = 0;
        }
        Validate();
    }

    private void Validate()
    {
        if (ConcentrationA == 0 && ConcentrationB == 0)
        {
            ValidationError = "Zero Concentration";
            ValidationErrorDetails = "Concentration of an ion cannot be zero for both solutions. " +
                "Please indicate a positive concentration in at least one solution.";
            return;
        }

        if (ConcentrationA < 0 || ConcentrationB < 0)
        {
            ValidationError = "Negative Concentration";
            ValidationErrorDetails = "It is not possible to have a negative concentration of an ion in solution.";
            return;
        }

        if (Conductivity <= 0)
        {
            ValidationError = "Negative Conductivity";
            ValidationErrorDetails = "Ions must have a positive conductivity value.";
            return;
        }

        if (Charge == 0)
        {
            ValidationError = "No Charge";
            ValidationErrorDetails = "Molecules without a charge in solution are not ions " +
                "and do not contribute to a junction potential. While uncharged molecules may exist " +
                "in your solutions, they do not need to be added to this calculator.";
            return;
        }

        if (string.IsNullOrWhiteSpace(Name))
        {
            ValidationError = "No Name";
            ValidationErrorDetails = "Every ion must be given a meaningful name.";
            return;
        }

        ValidationError = string.Empty;
        ValidationErrorDetails = string.Empty;
    }
}
