@page "/"

<PageTitle>LJPcalc</PageTitle>

@using LJPcalc.Core;
@using LJPcalc.Web.Shared

@inject IJSRuntime JSRuntime

<div class="table-responsive">
    <table class="table table-hover mt-3">
        <thead>
            <tr>
                <th>Ion</th>
                <th>
                    <span class="fw-strong">Valence</span><br />
                </th>
                <th>
                    <span class="fw-strong">Mobility</span><br />
                    <span class="fw-normal">m/s/N</span>
                </th>
                <th>
                    <span class="fw-strong">Conductivity</span><br />
                    <span class="fw-normal">S·cm<sup>2</sup>/mol</span>
                </th>
                <th>
                    <span class="fw-strong">@NameA</span><br />
                    <span class="fw-normal">mM</span>
                </th>
                <th>
                    <span class="fw-strong">@NameB</span><br />
                    <span class="fw-normal">mM</span>
                </th>
                <th>Edit</th>
            </tr>
        </thead>
        <tbody>
            @for (int i = 0; i < Ions.Length; i++)
            {
                int ionIndex = i;
                Ion ion = Ions[ionIndex];
                <tr>
                    <td>@(ion.Name.Split("(")[0])</td>
                    <td>@ion.Charge</td>
                    <td>@($"{ion.Mu / 1e4:#.000e0}")</td>
                    <td>@($"{ion.Conductivity:#0.###}")</td>
                    <td>@ion.InitialC0</td>
                    <td>@ion.InitialCL</td>
                    <td>
                        <a data-bs-toggle="modal" data-bs-target="#editIonModal" style="cursor: pointer"
                           @onclick="@(()=>EditIon(ionIndex))">
                            ✏️
                        </a>
                    </td>
                </tr>
            }
        </tbody>
    </table>
</div>

<EditIonModal @ref="MyEditIonModal" OnSaveIon="EditedIonSave" />

<EditTextModal @ref="MyEditTextModal" OnSave="@EditedTextSave" />

<div class="d-flex justify-content-end">

    <div class="mb-4">
        <div class="dropdown d-inline-block">
            <button class="btn btn-outline-primary dropdown-toggle m-1" type="button" id="dropdownMenu2" data-bs-toggle="dropdown" aria-expanded="false">
                Examples
            </button>
            <ul class="dropdown-menu" aria-labelledby="dropdownMenu2">
                @foreach (IKnownIonSet ionSet in LJPcalc.Core.KnownIonSets.KnownSets.GetAll())
                {
                    <li>
                        <button class="dropdown-item" type="button" onclick="@(()=>LoadIonSet(ionSet))">
                            @ionSet.Name
                        </button>
                    </li>
                }
            </ul>
        </div>

        <div class="dropdown d-inline-block">
            <button class="btn btn-outline-primary dropdown-toggle m-1" type="button" id="dropdownMenu2" data-bs-toggle="dropdown" aria-expanded="false">
                Order
            </button>
            <ul class="dropdown-menu" aria-labelledby="dropdownMenu2">
                <li>
                    <button class="dropdown-item" type="button" onclick="@(()=>{Ions = Ions.OrderBy(x=>x.C0 + x.CL).ToArray();})">
                        By Concentration
                    </button>
                </li>
                <li>
                    <button class="dropdown-item" type="button" onclick="@(()=>{Ions = Ions.OrderBy(x=>Random.Shared.NextDouble()).ToArray();})">
                        Randomize
                    </button>
                </li>
            </ul>
        </div>

        <div class="dropdown d-inline-block">
            <button class="btn btn-primary dropdown-toggle m-1" type="button" id="dropdownMenu2" data-bs-toggle="dropdown" aria-expanded="false">
                Ions
            </button>
            <ul class="dropdown-menu" aria-labelledby="dropdownMenu2">
                <li>
                    <button class="dropdown-item" type="button" data-bs-toggle="modal" data-bs-target="#editIonModal" @onclick=AddIon>
                        ➕ Add Ion
                    </button>
                </li>
                <li>
                    <button class="dropdown-item" type="button" @onclick=ClearIons>
                        🧹 Clear Ions
                    </button>
                </li>
                <li>
                    <button class="dropdown-item" type="button" data-bs-toggle="modal" data-bs-target="#editTextModal" @onclick=EditedTextClicked>
                        📄 Edit as Text
                    </button>
                </li>
            </ul>
        </div>
    </div>
</div>

<div class="d-flex py-3 align-items-center flex-wrap">
    <div>
        Model
    </div>
    <select class="form-select w-auto mx-2" @onchange=DoStuff>
        <option value="cell">a cell</option>
        <option value="solution">liquids</option>
    </select>
    <div>
        at
    </div>
    <div class="input-group mx-2" style="width: 6em;">
        <input type="text" class="form-control" @bind=TemperatureC>
        <span class="input-group-text" id="basic-addon1">ºC</span>
    </div>

    @if (ContinueCalculating)
    {
        <button class="btn btn-secondary" @onclick=CalcStop>Calculating...</button>
    }
    else
    {
        <button class="btn btn-primary" @onclick=CalcStart disabled=@IsIonTableError>Calculate LJP</button>
    }
</div>

@if (IsIonTableError)
{
    <ErrorAlert Title="Error" Message=@IonTableErrorMessage />
}

@if (KnownIonSet is not null)
{
    <div class="alert alert-primary text-break" role="alert">
        <strong>The "@KnownIonSet.Name" ion set has been loaded.</strong>
        @KnownIonSet.Details
    </div>
}

<LjpResultTable LatestResult="LatestResult" BestResult="BestResult" NameA="@NameA" NameB="@NameB" />

@if (Calc is not null)
{
    <div>Latest LJP = <code>@Calc.LatestSolution.LjpMillivolts mV</code></div>
    <div>Best LJP = <code>@Calc.BestSolution.LjpMillivolts mV</code></div>
    <div>Solutions Tested: <code>@Calc.Iterations</code></div>
    <div>Calculation Time: <code>@($"{Calc.Elapsed.TotalSeconds:N2}") sec</code></div>
}

@code {
    EditIonModal? MyEditIonModal = null;

    EditTextModal? MyEditTextModal = null;

    Ion[] Ions { get; set; } = Array.Empty<Ion>();

    double TotalChargeLeft = 0;

    double TotalChargeRight = 0;

    bool ContinueCalculating { get; set; } = false;

    LjpCalculator? Calc { get; set; } = null;

    LjpResult? LatestResult { get; set; } = null;

    LjpResult? BestResult { get; set; } = null;

    bool IsSolved => Calc is not null && Calc.BestSolution.MaxAbsoluteError <= 1;

    double TemperatureC { get; set; } = 25;

    bool IsIonTableError => !string.IsNullOrWhiteSpace(IonTableErrorMessage);

    string IonTableErrorMessage { get; set; } = string.Empty;

    IKnownIonSet? KnownIonSet { get; set; } = null;

    string NameA { get; set; } = "In";
    string NameB { get; set; } = "Out";

    protected override void OnInitialized()
    {
        JSRuntime.InvokeVoidAsync("updateFooterMessage", $"LJPcalc {LjpCalculator.GetVersion()} running on .NET {Environment.Version}");
        LoadIonSet(new LJPcalc.Core.KnownIonSets.AxoBitsArticle());
        KnownIonSet = null; // make it null so the message is not initially displayed

    }

    private void ValidateIonSet()
    {
        double absolteTotalLeft = Ions.Select(x => Math.Abs(x.Charge * x.C0)).Sum();
        double absoluteTotalRight = Ions.Select(x => Math.Abs(x.Charge * x.CL)).Sum();
        TotalChargeLeft = Ions.Select(x => x.Charge * x.C0).Sum();
        TotalChargeRight = Ions.Select(x => x.Charge * x.CL).Sum();

        if (Ions.Length < 2)
        {
            IonTableErrorMessage = "At least two ions are required to calculate LJP";
            return;
        }

        bool hasLeftCations = Ions.Where(x => x.C0 > 0).Where(x => x.Charge > 0).Any();
        bool hasLeftAnions = Ions.Where(x => x.C0 > 0).Where(x => x.Charge < 0).Any();
        if (!(hasLeftAnions && hasLeftAnions))
        {
            IonTableErrorMessage = "Solution A requires both cations and anions";
            return;
        }

        bool hasRightCations = Ions.Where(x => x.CL > 0).Where(x => x.Charge > 0).Any();
        bool hasRightAnions = Ions.Where(x => x.CL > 0).Where(x => x.Charge < 0).Any();
        if (!(hasRightCations && hasRightAnions))
        {
            IonTableErrorMessage = "Solution B requires both cations and anions";
            return;
        }

        IonTableErrorMessage = string.Empty;
    }

    private async Task CalcStart()
    {
        KnownIonSet = null;
        ContinueCalculating = true;
        await Task.Delay(1); // helps ensure a screen refresh happens
        StateHasChanged();

        Calc = new(Ions, TemperatureC);
        while (ContinueCalculating)
        {
            Calc.Iterate();
            LatestResult = Calc.GetLatestLjpResult();
            BestResult = Calc.GetBestLjpResult();
            if (IsSolved)
                ContinueCalculating = false;
            await Task.Delay(1);
            StateHasChanged();
        }
    }

    private void CalcStop()
    {
        ContinueCalculating = false;
    }

    private void LoadIonSet(IKnownIonSet knownIonSet)
    {
        Ions = IonLibrary.Lookup(knownIonSet.Ions);
        ValidateIonSet();
        ClearResults();
        StateHasChanged();
        KnownIonSet = knownIonSet;
        TemperatureC = knownIonSet.Temperature_C;
    }

    private void EditIon(int ionIndex)
    {
        if (MyEditIonModal is null)
            return;

        MyEditIonModal.IsNewIon = false;
        MyEditIonModal.IsToBeDeleted = false;
        MyEditIonModal.IndexOfIonBeingEdited = ionIndex;

        MyEditIonModal.Name = Ions[ionIndex].Name;
        MyEditIonModal.Charge = Ions[ionIndex].Charge;
        MyEditIonModal.Conductivity = Ions[ionIndex].Conductivity;
        MyEditIonModal.ConcentrationA = Ions[ionIndex].C0;
        MyEditIonModal.ConcentrationB = Ions[ionIndex].CL;

        MyEditIonModal.Reset();

        KnownIonSet = null;
    }

    private void AddIon()
    {
        if (MyEditIonModal is null)
            return;

        MyEditIonModal.IsNewIon = true;
        MyEditIonModal.IsToBeDeleted = false;

        Ion defaultNewIon = IonLibrary.KnownIons.Where(x => x.Name.StartsWith("A")).First();
        MyEditIonModal.PresetSelected(new ChangeEventArgs() { Value = defaultNewIon.NameWithCharge });

        ClearResults();
        ValidateIonSet();
        KnownIonSet = null;
    }

    private void ClearIons()
    {
        Ions = Array.Empty<Ion>();
        ClearResults();
        ValidateIonSet();
        KnownIonSet = null;
    }

    private void EditedTextClicked()
    {
        if (MyEditTextModal is null)
            return;

        MyEditTextModal.Text = IonSet.ToText(Ions, TemperatureC);
    }

    private void EditedTextSave()
    {
        if (MyEditTextModal is null)
            return;

        (Ions, TemperatureC) = IonSet.FromText(MyEditTextModal.Text);

        ClearResults();
        ValidateIonSet();
        KnownIonSet = null;
    }

    private void ClearResults()
    {
        Calc = null;
        LatestResult = null;
        BestResult = null;
        KnownIonSet = null;
    }

    private void EditedIonSave()
    {
        if (MyEditIonModal is null)
            return;

        if (MyEditIonModal.IsToBeDeleted)
        {
            Ions = Enumerable.Range(0, Ions.Length)
                .Where(i => i != MyEditIonModal.IndexOfIonBeingEdited)
                .Select(i => Ions[i])
                .ToArray();
        }
        else if (MyEditIonModal.IsNewIon)
        {
            Ions = Ions.Append(MyEditIonModal.ToIon()).ToArray();
        }
        else
        {
            Ions[MyEditIonModal.IndexOfIonBeingEdited] = MyEditIonModal.ToIon();
        }

        ClearResults();
        ValidateIonSet();
        KnownIonSet = null;
    }

    private void DoStuff(ChangeEventArgs e)
    {
        if ($"{e.Value}" == "cell")
        {
            NameA = "In";
            NameB = "Out";
        }
        else if ($"{e.Value}" == "solution")
        {
            NameA = "A";
            NameB = "B";
        }
    }
}