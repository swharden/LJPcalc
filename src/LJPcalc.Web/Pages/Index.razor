@using LJPcalc.Core;

@inject IJSRuntime JSRuntime

<div class="table-responsive">
    <table class="table table-hover mt-3">
        <thead>
            <tr>
                <th>Ion</th>
                @if (ShowDetailsInTable)
                {
                    <th>
                        <span class="fw-strong">Valence</span><br />
                    </th>
                    <th>
                        <span class="fw-strong">Mobility</span><br />
                        <span class="fw-normal">m/s/N</span>
                    </th>
                    <th>
                        <span class="fw-strong">Conductivity</span><br />
                        <span class="fw-normal">S·cm<sup>2</sup>/mol</span>
                    </th>
                }
                <th>
                    <span class="fw-strong">A</span><br />
                    <span class="fw-normal">mM</span>
                </th>
                <th>
                    <span class="fw-strong">B</span><br />
                    <span class="fw-normal">mM</span>
                </th>
                <th>Edit</th>
            </tr>
        </thead>
        <tbody>
            @for (int i = 0; i < Ions.Length; i++)
            {
                int ionIndex = i;
                Ion ion = Ions[ionIndex];
                <tr>
                    @if (ShowDetailsInTable)
                    {
                        <td>@(ion.Name.Split("(")[0])</td>
                        <td>@ion.Charge</td>
                        <td>@($"{ion.Mu / 1e4:#.000e0}")</td>
                        <td>@($"{ion.Conductivity:#0.###}")</td>
                    }
                    else
                    {
                        <td>@(ion.NameWithCharge)</td>
                    }
                    <td>@ion.InitialC0</td>
                    <td>@ion.InitialCL</td>
                    <td>
                        <a data-bs-toggle="modal" data-bs-target="#editIonModal" style="cursor: pointer"
                       @onclick="@(()=>EditIon(ionIndex))">
                            ✏️
                        </a>
                    </td>
                </tr>
            }
        </tbody>
    </table>
</div>

@if (KnownIonSet is not null && ShowIonSetDetails)
{
    <svg xmlns="http://www.w3.org/2000/svg" style="display: none;">
        <symbol id="info-fill" fill="currentColor" viewBox="0 0 16 16">
            <path d="M8 16A8 8 0 1 0 8 0a8 8 0 0 0 0 16zm.93-9.412-1 4.705c-.07.34.029.533.304.533.194 0 .487-.07.686-.246l-.088.416c-.287.346-.92.598-1.465.598-.703 0-1.002-.422-.808-1.319l.738-3.468c.064-.293.006-.399-.287-.47l-.451-.081.082-.381 2.29-.287zM8 5.5a1 1 0 1 1 0-2 1 1 0 0 1 0 2z" />
        </symbol>
    </svg>

    <div class="alert alert-primary" role="alert">
        <h4 class="alert-heading">
            Loaded Example Ion Set
        </h4>
        <hr />
        <div>
            <p>
                <strong>@KnownIonSet.Name:</strong> @KnownIonSet.Details
            </p>
        </div>
    </div>
}

@if (ShowBalanceWarning)
{
    <div class="px-3">
        <div class="alert alert-warning w-100" role="alert">
            <h4 class="alert-heading">
                <svg xmlns="http://www.w3.org/2000/svg" width="24" height="24" fill="currentColor" class="bi bi-exclamation-triangle-fill flex-shrink-0 me-2" viewBox="0 0 16 16" role="img" aria-label="Warning:">
                    <path d="M8.982 1.566a1.13 1.13 0 0 0-1.96 0L.165 13.233c-.457.778.091 1.767.98 1.767h13.713c.889 0 1.438-.99.98-1.767L8.982 1.566zM8 5c.535 0 .954.462.9.995l-.35 3.507a.552.552 0 0 1-1.1 0L7.1 5.995A.905.905 0 0 1 8 5zm.002 6a1 1 0 1 1 0 2 1 1 0 0 1 0-2z" />
                </svg>
                Unbalanced Solution
            </h4>
            <div>
                The total charge (sum of concentration times valence for all ions) should be near zero on both sides of the junction.
                If it is not near zero, the LJP calculator will adjust the side B concentration of the ion with highest concentration
                to achieve electronegativity.
            </div>
            <ul class="my-2">
                <li>Side A total charge: @Math.Round(TotalChargeLeft, 3)</li>
                <li>Side B total charge: @Math.Round(TotalChargeRight, 3)</li>
            </ul>
        </div>
    </div>
}

<EditIonModal @ref="MyEditIonModal" OnSaveIon="EditedIonSave" />

<EditTextModal @ref="MyEditTextModal" OnSave="@EditedTextSave" />

<div class="d-flex justify-content-between">

    <div>
        <div class="d-inline-block">
            <div class="input-group" style="width: 100px;">
                <span class="input-group-text" id="basic-addon1">ºC</span>
                <input type="text" class="form-control" @bind=TemperatureC>
            </div>
        </div>
        <div class="d-inline-block ms-2">
            <input class="form-check-input" type="checkbox" @bind=ShowDetailsInTable />
            <label class="form-check-label">Details</label>
        </div>
    </div>

    <div class="mb-4">
        <div class="dropdown d-inline-block">
            <button class="btn btn-outline-primary dropdown-toggle m-1" type="button" id="dropdownMenu2" data-bs-toggle="dropdown" aria-expanded="false">
                Examples
            </button>
            <ul class="dropdown-menu" aria-labelledby="dropdownMenu2">
                @foreach (IKnownIonSet ionSet in LJPcalc.Core.KnownIonSets.KnownSets.GetAll())
                {
                    <li>
                        <button class="dropdown-item" type="button" onclick="@(()=>LoadIonSet(ionSet))">
                            @ionSet.Name
                        </button>
                    </li>
                }
            </ul>
        </div>

        <div class="dropdown d-inline-block">
            <button class="btn btn-outline-primary dropdown-toggle m-1" type="button" id="dropdownMenu2" data-bs-toggle="dropdown" aria-expanded="false">
                Ion Set
            </button>
            <ul class="dropdown-menu" aria-labelledby="dropdownMenu2">
                <li>
                    <button class="dropdown-item" type="button" data-bs-toggle="modal" data-bs-target="#editIonModal" @onclick=AddIon>
                        Add Ion
                    </button>
                </li>
                <li>
                    <button class="dropdown-item" type="button" @onclick=ClearIons>
                        Clear Ions
                    </button>
                </li>
                <li>
                    <hr class="dropdown-divider">
                </li>
                <li>
                    <button class="dropdown-item" type="button" data-bs-toggle="modal" data-bs-target="#editTextModal" @onclick=EditedTextClicked>
                        Edit as Text
                    </button>
                </li>
                <li>
                    <hr class="dropdown-divider">
                </li>
                <li>
                    <button class="dropdown-item" type="button" onclick="@(()=>{Ions = Ions.OrderBy(x=>x.Name).ToArray();})">
                        Sort Alphabetically
                    </button>
                </li>
                <li>
                    <button class="dropdown-item" type="button" onclick="@(()=>{Ions = Ions.OrderBy(x=>x.C0 + x.CL).ToArray();})">
                        Sort by Concentration
                    </button>
                </li>
                <li>
                    <button class="dropdown-item" type="button" onclick="@(()=>{Ions = Ions.OrderBy(x=>Random.Shared.NextDouble()).ToArray();})">
                        Sort Randomly
                    </button>
                </li>
            </ul>
        </div>
    </div>
</div>

@if (IsIonTableError)
{
    <ErrorAlert Title="Error" Message=@IonTableErrorMessage />
}

@if (ContinueCalculating)
{
    <button class="btn btn-primary" type="button" disabled>
        Calculating...
        <span class="spinner-border spinner-border-sm" role="status" aria-hidden="true"></span>
    </button>
    <button class="btn btn-primary ms-1" @onclick=CalcStop>Stop</button>
}
else
{
    <button class="btn btn-primary" @onclick=CalcStart disabled=@IsIonTableError>Calculate LJP</button>
}

<LjpResultTable LatestResult="LatestResult" BestResult="BestResult" />

@if (Calc is not null)
{
    <div>Latest LJP = <code>@Calc.LatestSolution.LjpMillivolts mV</code></div>
    <div>Best LJP = <code>@Calc.BestSolution.LjpMillivolts mV</code></div>
    <div>Solutions Tested: <code>@Calc.Iterations</code></div>
    <div>Calculation Time: <code>@($"{Calc.Elapsed.TotalSeconds:N2}") sec</code></div>
}

@code {
    EditIonModal? MyEditIonModal = null;

    EditTextModal? MyEditTextModal = null;

    Ion[] Ions { get; set; } = Array.Empty<Ion>();

    double TotalChargeLeft = 0;

    double TotalChargeRight = 0;

    bool ShowBalanceWarning = false;

    bool ContinueCalculating { get; set; } = false;

    LjpCalculator? Calc { get; set; } = null;

    LjpResult? LatestResult { get; set; } = null;

    LjpResult? BestResult { get; set; } = null;

    bool IsSolved => Calc is not null && Calc.BestSolution.MaxAbsoluteError <= 1;

    bool ShowDetailsInTable { get; set; } = true;

    double TemperatureC { get; set; } = 25;

    bool IsIonTableError => !string.IsNullOrWhiteSpace(IonTableErrorMessage);

    string IonTableErrorMessage { get; set; } = string.Empty;

    IKnownIonSet? KnownIonSet { get; set; } = null;

    bool ShowIonSetDetails = false;

    protected override void OnInitialized()
    {
        JSRuntime.InvokeVoidAsync("updateFooterMessage", $"LJPcalc {LjpCalculator.GetVersion()} running on .NET {Environment.Version}");
        LoadIonSet(new LJPcalc.Core.KnownIonSets.AxoBitsArticle());
    }

    private void ValidateIonSet()
    {
        double absolteTotalLeft = Ions.Select(x => Math.Abs(x.Charge * x.C0)).Sum();
        double absoluteTotalRight = Ions.Select(x => Math.Abs(x.Charge * x.CL)).Sum();
        TotalChargeLeft = Ions.Select(x => x.Charge * x.C0).Sum();
        TotalChargeRight = Ions.Select(x => x.Charge * x.CL).Sum();
        ShowBalanceWarning = Math.Abs(TotalChargeLeft) > .01 * absolteTotalLeft || Math.Abs(TotalChargeRight) > .01 * absoluteTotalRight;

        if (Ions.Length < 2)
        {
            IonTableErrorMessage = "At least two ions are required to calculate LJP";
            return;
        }

        bool hasLeftCations = Ions.Where(x => x.C0 > 0).Where(x => x.Charge > 0).Any();
        bool hasLeftAnions = Ions.Where(x => x.C0 > 0).Where(x => x.Charge < 0).Any();
        if (!(hasLeftAnions && hasLeftAnions))
        {
            IonTableErrorMessage = "Solution A requires both cations and anions";
            return;
        }

        bool hasRightCations = Ions.Where(x => x.CL > 0).Where(x => x.Charge > 0).Any();
        bool hasRightAnions = Ions.Where(x => x.CL > 0).Where(x => x.Charge < 0).Any();
        if (!(hasRightCations && hasRightAnions))
        {
            IonTableErrorMessage = "Solution B requires both cations and anions";
            return;
        }

        IonTableErrorMessage = string.Empty;
    }

    private async Task CalcStart()
    {
        ContinueCalculating = true;
        await Task.Delay(1); // helps ensure a screen refresh happens
        StateHasChanged();

        Calc = new(Ions, TemperatureC);
        while (ContinueCalculating)
        {
            Calc.Iterate();
            LatestResult = Calc.GetLatestLjpResult();
            BestResult = Calc.GetBestLjpResult();
            if (IsSolved)
                ContinueCalculating = false;
            await Task.Delay(1);
            StateHasChanged();
        }
    }

    private void CalcStop()
    {
        ContinueCalculating = false;
    }

    private void LoadIonSet(IKnownIonSet knownIonSet)
    {
        Ions = IonLibrary.Lookup(knownIonSet.Ions);
        ValidateIonSet();
        ClearResults();
        StateHasChanged();
        KnownIonSet = knownIonSet;
        TemperatureC = knownIonSet.Temperature_C;
    }

    private void EditIon(int ionIndex)
    {
        if (MyEditIonModal is null)
            return;

        MyEditIonModal.IsNewIon = false;
        MyEditIonModal.IsToBeDeleted = false;
        MyEditIonModal.IndexOfIonBeingEdited = ionIndex;

        MyEditIonModal.Name = Ions[ionIndex].Name;
        MyEditIonModal.Charge = Ions[ionIndex].Charge;
        MyEditIonModal.Conductivity = Ions[ionIndex].Conductivity;
        MyEditIonModal.ConcentrationA = Ions[ionIndex].C0;
        MyEditIonModal.ConcentrationB = Ions[ionIndex].CL;

        MyEditIonModal.Reset();

        KnownIonSet = null;
    }

    private void AddIon()
    {
        if (MyEditIonModal is null)
            return;

        MyEditIonModal.IsNewIon = true;
        MyEditIonModal.IsToBeDeleted = false;

        Ion defaultNewIon = IonLibrary.KnownIons.Where(x => x.Name.StartsWith("A")).First();
        MyEditIonModal.PresetSelected(new ChangeEventArgs() { Value = defaultNewIon.NameWithCharge });

        ClearResults();
        ValidateIonSet();
        KnownIonSet = null;
    }

    private void ClearIons()
    {
        Ions = Array.Empty<Ion>();
        ClearResults();
        ValidateIonSet();
        KnownIonSet = null;
    }

    private void EditedTextClicked()
    {
        if (MyEditTextModal is null)
            return;

        MyEditTextModal.Text = IonSet.ToText(Ions, TemperatureC);
    }

    private void EditedTextSave()
    {
        if (MyEditTextModal is null)
            return;

        (Ions, TemperatureC) = IonSet.FromText(MyEditTextModal.Text);

        ClearResults();
        ValidateIonSet();
        KnownIonSet = null;
    }

    private void ClearResults()
    {
        Calc = null;
        LatestResult = null;
        BestResult = null;
        KnownIonSet = null;
    }

    private void EditedIonSave()
    {
        if (MyEditIonModal is null)
            return;

        if (MyEditIonModal.IsToBeDeleted)
        {
            Ions = Enumerable.Range(0, Ions.Length)
                .Where(i => i != MyEditIonModal.IndexOfIonBeingEdited)
                .Select(i => Ions[i])
                .ToArray();
        }
        else if (MyEditIonModal.IsNewIon)
        {
            Ions = Ions.Append(MyEditIonModal.ToIon()).ToArray();
        }
        else
        {
            Ions[MyEditIonModal.IndexOfIonBeingEdited] = MyEditIonModal.ToIon();
        }

        ClearResults();
        ValidateIonSet();
        KnownIonSet = null;
    }
}