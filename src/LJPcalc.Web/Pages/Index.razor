@using LJPcalc.Core;


<table class="table table-hover mt-3">
    <thead>
        <tr>
            <th>Ion</th>
            @if (ShowDetailsInTable)
            {
                <th>
                    <span class="fw-strong">Charge</span><br />
                </th>
                <th>
                    <span class="fw-strong">Mobility</span><br />
                    <span class="fw-normal">m/s/N</span>
                </th>
                <th>
                    <span class="fw-strong">Conductivity</span><br />
                    <span class="fw-normal">S·cm<sup>2</sup>/mol</span>
                </th>
            }
            <th>
                <span class="fw-strong">A</span><br />
                <span class="fw-normal">mM</span>
            </th>
            <th>
                <span class="fw-strong">B</span><br />
                <span class="fw-normal">mM</span>
            </th>
            <th>Edit</th>
        </tr>
    </thead>
    <tbody>
        @for (int i = 0; i < Ions.Length; i++)
        {
            int ionIndex = i;
            Ion ion = Ions[ionIndex];
            <tr>
                @if (ShowDetailsInTable)
                {
                    <td>@(ion.Name.Split("(")[0])</td>
                    <td>@ion.Charge</td>
                    <td>@($"{ion.Mu / 1e4:#.000e0}")</td>
                    <td>@($"{ion.Conductivity:#0.###}")</td>
                }
                else
                {
                    <td>@(ion.NameWithCharge)</td>
                }
                <td>@ion.InitialC0</td>
                <td>@ion.InitialCL</td>
                <td>
                    <a data-bs-toggle="modal" data-bs-target="#editIonModal" style="cursor: pointer"
                   @onclick="@(()=>EditIon(ionIndex))">
                        ✏️
                    </a>
                </td>
            </tr>
        }
    </tbody>
</table>

<EditIonModal Ion="IonBeingEdited" OnSaveIon="EditedIonSave" />

<div class="d-flex justify-content-between">

    <div>
        <div class="d-inline-block">
            <div class="input-group" style="width: 100px;">
                <span class="input-group-text" id="basic-addon1">ºC</span>
                <input type="text" class="form-control" @bind=TemperatureC>
            </div>
        </div>
        <div class="d-inline-block ms-2">
            <input class="form-check-input" type="checkbox" @bind=ShowDetailsInTable />
            <label class="form-check-label">Details</label>
        </div>
    </div>

    <div class="mb-4">
        <div class="dropdown d-inline-block">
            <button class="btn btn-outline-primary dropdown-toggle" type="button" id="dropdownMenu2" data-bs-toggle="dropdown" aria-expanded="false">
                Examples
            </button>
            <ul class="dropdown-menu" aria-labelledby="dropdownMenu2">
                @foreach (var ionSet in LJPcalc.Core.KnownIonSets.KnownSets.GetAll())
                {
                    <li>
                        <button class="dropdown-item" type="button" onclick="@(()=>LoadIonSet(ionSet.Ions))">
                            @ionSet.Name
                        </button>
                    </li>
                }
            </ul>
        </div>
        <button class="btn btn-outline-primary" @onclick=ClearIons>
            Clear Ions
        </button>
        <button class="btn btn-outline-primary" data-bs-toggle="modal" data-bs-target="#editIonModal" @onclick=AddIon>
            Add Ion
        </button>
    </div>
</div>

@if (!ContinueCalculating)
{
    <button class="btn btn-primary" @onclick=CalcStart>Calculate LJP</button>
}
else
{
    <button class="btn btn-primary" type="button" disabled>
        Calculating...
        <span class="spinner-border spinner-border-sm" role="status" aria-hidden="true"></span>
    </button>
    <button class="btn btn-primary ms-1" @onclick=CalcStop>Stop</button>
}

@if (Calc is not null)
{
    string ljpPrettyMillivolts = (Calc.BestSolution.LjpMillivolts > 0 ? "+" : "") + $"{Calc.BestSolution.LjpMillivolts:N3}";

    string color = IsSolved ? "green" : "red";

    <div class="display-5 mt-4" style="color: @color">LJP = @ljpPrettyMillivolts mV</div>

    @if (!IsSolved)
    {
        <div style="color: @color">
            <div>Result is derived from an ion table with @Math.Round(Calc.BestSolution.MaxAbsoluteError, 1)% maximum concentration error.</div>
            <div>Additional time is required to find a solution with less error...</div>
        </div>
    }

    <div>Best Solution: <code>@Calc.BestSolution</code></div>
    <div>Solution #@Calc.Iterations: <code>@Calc.LatestSolution</code></div>
    <div>Calculation Time: <code>@($"{Calc.Elapsed.TotalSeconds:N2}") sec</code></div>
}

@if (IsSolved)
{
    <div class="mt-4">
        <span class="fw-bold">
            If you enjoy LJPcalc, consider citing it by name:
        </span>
        <span class="fst-italic">
            Liquid junction potential was calculated according to the stationary Nernst–Planck equation
            (<a href="https://arxiv.org/abs/1403.3640">Marino et al., 2014</a>)
            using LJPcalc software (<a href="https://swharden.com/LJPcalc">https://swharden.com/LJPcalc</a>).
        </span>
    </div>
}

<footer class="d-flex mb-3 justify-content-evenly" style="opacity: .5; margin-top: 7em;">
    <div>
        LJPcalc @LjpCalculator.GetVersion()
    </div>
    <div>
        .NET @Environment.Version
    </div>
    <div>
        <a href="https://github.com/swharden/LJPcalc">View source</a>
    </div>
</footer>

@code {

    Ion[] Ions { get; set; } = Array.Empty<Ion>();

    readonly EditableIon IonBeingEdited = new();

    bool ContinueCalculating { get; set; } = false;

    LjpCalculator? Calc { get; set; } = null;

    bool IsSolved => Calc is not null && Calc.BestSolution.MaxAbsoluteError < .01;

    bool ShowDetailsInTable { get; set; } = true;

    double TemperatureC { get; set; } = 25;

    protected override void OnInitialized()
    {
        LoadIonSet(new LJPcalc.Core.KnownIonSets.AxoBitsArticle().Ions);
    }

    private async Task CalcStart()
    {
        ContinueCalculating = true;
        await Task.Delay(1); // helps ensure a screen refresh happens
        StateHasChanged();

        Calc = new(Ions, TemperatureC);
        while (ContinueCalculating)
        {
            Calc.Iterate();
            if (IsSolved)
                ContinueCalculating = false;
            await Task.Delay(1);
            StateHasChanged();
        }
    }

    private void CalcStop()
    {
        ContinueCalculating = false;
    }

    private void LoadIonSet(Ion[] ions)
    {
        Ions = IonLibrary.Lookup(ions);
        StateHasChanged();
    }

    private void EditIon(int ionIndex)
    {
        IonBeingEdited.IsNewIon = false;
        IonBeingEdited.IsDeleted = false;
        IonBeingEdited.UpdateFromIon(Ions, ionIndex);
    }

    private void AddIon()
    {
        IonBeingEdited.IsNewIon = true;
        IonBeingEdited.IsDeleted = false;
        IonBeingEdited.Reset();
    }

    private void ClearIons()
    {
        Ions = Array.Empty<Ion>();
    }

    private void EditedIonSave()
    {
        if (IonBeingEdited.IsDeleted)
        {
            Ions = Enumerable.Range(0, Ions.Length)
                .Where(i => i != IonBeingEdited.Index)
                .Select(i => Ions[i])
                .ToArray();
        }
        else if (IonBeingEdited.IsNewIon)
        {
            Ions = Ions.Append(IonBeingEdited.ToIon()).ToArray();
        }
        else
        {
            Ions[IonBeingEdited.Index] = IonBeingEdited.ToIon();
        }
    }
}