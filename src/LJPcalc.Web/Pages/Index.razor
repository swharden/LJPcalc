@page "/"
@using LJPcalc.Core;

<PageTitle>Index</PageTitle>

<header class="text-light py-3" style="background-color: #003366;">
    <div class="container">
        <div class="display-4 lh-1" style="font-weight: 400;">LJPCalc</div>
        <div class="" style="color: #CCC;">
            Liquid Junction Potential (LJP) calculator
        </div>
    </div>
</header>

<div class="container">

    <table class="table table-hover mt-3">
        <thead>
            <tr>
                <th>Ion</th>
                <th>
                    <span class="fw-strong">Mobility</span><br />
                    <span class="fw-normal">m/s/N</span>
                </th>
                <th>
                    <span class="fw-strong">Conductivity</span><br />
                    <span class="fw-normal">S·cm<sup>2</sup>/mol</span>
                </th>
                <th>
                    <span class="fw-strong">A</span><br />
                    <span class="fw-normal">mM</span>
                </th>
                <th>
                    <span class="fw-strong">B</span><br />
                    <span class="fw-normal">mM</span>
                </th>
                <th>Edit</th>
                <th>Delete</th>
            </tr>
        </thead>
        <tbody>
            @foreach (Ion ion in Ions)
            {
                <tr>
                    <td>@ion.NameWithCharge</td>
                    <td>@($"{ion.Mu / 1e4:#.000e0}")</td>
                    <td>@($"{ion.Conductivity:#0.###}")</td>
                    <td>@ion.InitialC0</td>
                    <td>@ion.InitialCL</td>
                    <td>✏️</td>
                    <td>❌</td>
                </tr>
            }
        </tbody>
    </table>

    <div class="text-end">

        <div class="dropdown d-inline-block">
            <button class="btn btn-outline-primary dropdown-toggle" type="button" id="dropdownMenu2" data-bs-toggle="dropdown" aria-expanded="false">
                Sample Ion Sets
            </button>
            <ul class="dropdown-menu" aria-labelledby="dropdownMenu2">
                @foreach (var ionSet in LJPcalc.Core.KnownIonSets.KnownSets.GetAll())
                {
                    <li>
                        <button class="dropdown-item" type="button" onclick="@(()=>LoadIonSet(ionSet.Ions))">
                            @ionSet.Name
                        </button>
                    </li>
                }
            </ul>
        </div>

        <button class="btn btn-outline-primary">Add Ion</button>
    </div>

    @if (!Calculating)
    {
        <button class="btn btn-primary" @onclick=CalcStart>Calculate LJP</button>
    }
    else
    {
        <button class="btn btn-primary" type="button" disabled>
            Calculating...
            <span class="spinner-border spinner-border-sm" role="status" aria-hidden="true"></span>
        </button>
        <button class="btn btn-primary ms-1" @onclick=CalcStop>Stop</button>
    }

    @if (Result is not null)
    {
        string ljpPrettyMillivolts = (Result.LjpMillivolts > 0 ? "+" : "") + $"{Result.LjpMillivolts:N3}";
        bool solved = Result.Error < 1;
        string color = solved ? "green" : "red";

        <div class="display-5 mt-4" style="color: @color">LJP = @ljpPrettyMillivolts mV</div>

        @if (!solved)
        {
            <div style="color: @color">
                <div>LJP displayed is an approximation based on an ion set with @Math.Round(Result.Error, 1)% error.</div>
                <div>More iterations are required to minimize concentration error...</div>
            </div>
        }
        else
        {
            <div style="color: @color">
                <div>LJP was calculated from an ion table with maximum @Math.Round(Result.Error, 1)% concentration error.</div>
                <div>Additional iterations are unlikely to significantly improve LJP accuracy...</div>
            </div>
        }

        <div class="mt-4 bg-light border rounded shadow-sm p-3">
            <h3>Calculation Details</h3>
            <div>LJP = @Result.LjpMillivolts mV</div>
            <div>Error: @Result.Error %</div>
            <div>Iterations: @Result.Iterations</div>
            <div>Calculation time: <code>@($"{Result.Elapsed.TotalSeconds:N2}") sec</code></div>
        </div>
    }

</div>

<footer class="container mt-5">
    <div class="text-muted">
        LJPcalc was created by
        <a href="http://swharden.com/">Scott Harden</a> and
        <a href="https://sites.google.com/site/dbrogioli/">Doriano Brogioli</a>
        and uses calculations described by
        <a href="https://arxiv.org/abs/1403.3640">Marino et al., 2014</a>.
    </div>
</footer>

@code {

    Ion[] Ions { get; set; } = Array.Empty<Ion>();

    bool Calculating { get; set; } = false;

    LjpCalculator? Calc { get; set; } = null;

    LjpResult? Result { get; set; } = null;

    protected override void OnInitialized()
    {
        LoadIonSet(new LJPcalc.Core.KnownIonSets.Owen2013().Ions);
    }

    private async Task CalcStart()
    {
        Calculating = true;
        await Task.Delay(1); // helps ensure a screen refresh happens
        StateHasChanged();

        Calc = new(Ions);
        while (Calc is not null)
        {
            Calc.Iterate();
            Result = Calc.GetLJP();
            await Task.Delay(1);
            StateHasChanged();
        }
        Calculating = false;
    }

    private void CalcStop()
    {
        Calc = null;
    }

    private void LoadIonSet(Ion[] ions)
    {
        Ions = IonLibrary.Lookup(ions);
        StateHasChanged();
    }
}