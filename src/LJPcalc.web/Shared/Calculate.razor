@inject LJPcalc.web.Services.LjpService LjpService

<div class="text-center">
    <button class="btn btn-primary btn-lg" type="button" disabled=@Calculating @onclick="CalculateLJP">
        @if (Calculating)
        {
            <span class="spinner-border spinner-border" role="status" aria-hidden="true"></span>
            <span>Calculating...</span>
        }
        else
        {
            <span>Calculate LJP</span>
        }
    </button>

    <div class="m-2 mt-5 alert alert-danger @(string.IsNullOrWhiteSpace(@LjpService.ResultErrorMessage) ? "d-none" : "d-block")" role="alert">
        @LjpService.ResultErrorMessage
    </div>
</div>

<div class=" text-center @(double.IsNaN(LjpService.ResultLJP) || Calculating ? "invisible" : "")">
    <div class="display-4 m-2 mt-5">LJP = @Math.Round(LjpService.ResultLJP, 3) mV</div>
    <pre class="m-2 mt-5 text-muted d-inline-block text-left">@LjpService.ResultDetails</pre>
</div>

@code {

    private bool Calculating;

    private async Task CalculateLJP()
    {
        Calculating = true;
        StateHasChanged();

        // give it some time to show the user the calculation message
        await Task.Delay(TimeSpan.FromMilliseconds(100))
                  .ContinueWith(task => LjpService.CalculateLJP());


        Calculating = false;
    }
}
